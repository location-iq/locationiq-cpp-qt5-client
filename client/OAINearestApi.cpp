/**
 * LocationIQ
 * LocationIQ provides flexible enterprise-grade location based solutions. We work with developers, startups and enterprises worldwide serving billions of requests everyday. This page provides an overview of the technical aspects of our API and will help you get started.
 *
 * The version of the OpenAPI document: 1.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINearestApi.h"
#include "OAIHelpers.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAINearestApi::OAINearestApi(const QString &scheme, const QString &host, int port, const QString &basePath, const int timeOut)
    : _scheme(scheme),
      _host(host),
      _port(port),
      _basePath(basePath),
      _timeOut(timeOut),
      isResponseCompressionEnabled(false),
      isRequestCompressionEnabled(false) {}

OAINearestApi::~OAINearestApi() {
}

void OAINearestApi::setScheme(const QString &scheme) {
    _scheme = scheme;
}

void OAINearestApi::setHost(const QString &host) {
    _host = host;
}

void OAINearestApi::setPort(int port) {
    _port = port;
}

void OAINearestApi::setBasePath(const QString &basePath) {
    _basePath = basePath;
}

void OAINearestApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAINearestApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAINearestApi::addHeaders(const QString &key, const QString &value) {
    defaultHeaders.insert(key, value);
}

void OAINearestApi::enableRequestCompression() {
    isRequestCompressionEnabled = true;
}

void OAINearestApi::enableResponseCompression() {
    isResponseCompressionEnabled = true;
}

void OAINearestApi::abortRequests(){
    emit abortRequestsSignal();
}

void OAINearestApi::nearest(const QString &coordinates, const QString &generate_hints, const QString &exclude, const QString &bearings, const QString &radiuses, const QString &approaches, const qint32 &number) {
    QString fullPath = QString("%1://%2%3%4%5")
                           .arg(_scheme)
                           .arg(_host)
                           .arg(_port ? ":" + QString::number(_port) : "")
                           .arg(_basePath)
                           .arg("/nearest/driving/{coordinates}");
    QString coordinatesPathParam("{");
    coordinatesPathParam.append("coordinates").append("}");
    fullPath.replace(coordinatesPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(coordinates)));

    if (fullPath.indexOf("?") > 0)
        fullPath.append("&");
    else
        fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("generate_hints")).append("=").append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(generate_hints)));

    if (fullPath.indexOf("?") > 0)
        fullPath.append("&");
    else
        fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("exclude")).append("=").append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(exclude)));

    if (fullPath.indexOf("?") > 0)
        fullPath.append("&");
    else
        fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("bearings")).append("=").append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(bearings)));

    if (fullPath.indexOf("?") > 0)
        fullPath.append("&");
    else
        fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("radiuses")).append("=").append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(radiuses)));

    if (fullPath.indexOf("?") > 0)
        fullPath.append("&");
    else
        fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("approaches")).append("=").append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(approaches)));

    if (fullPath.indexOf("?") > 0)
        fullPath.append("&");
    else
        fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("number")).append("=").append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(number)));

    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");

    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAINearestApi::nearestCallback);
    connect(this, &OAINearestApi::abortRequestsSignal, worker, &QObject::deleteLater); 
    worker->execute(&input);
}

void OAINearestApi::nearestCallback(OAIHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    OAIDirections_nearest output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit nearestSignal(output);
        emit nearestSignalFull(worker, output);
    } else {
        emit nearestSignalE(output, error_type, error_str);
        emit nearestSignalEFull(worker, error_type, error_str);
    }
}

} // namespace OpenAPI
