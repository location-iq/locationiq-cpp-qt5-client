/**
 * LocationIQ
 * LocationIQ provides flexible enterprise-grade location based solutions. We work with developers, startups and enterprises worldwide serving billions of requests everyday. This page provides an overview of the technical aspects of our API and will help you get started.
 *
 * The version of the OpenAPI document: 1.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDirections_directions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDirections_directions::OAIDirections_directions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDirections_directions::OAIDirections_directions() {
    this->initializeModel();
}

OAIDirections_directions::~OAIDirections_directions() {}

void OAIDirections_directions::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_waypoints_isSet = false;
    m_waypoints_isValid = false;

    m_routes_isSet = false;
    m_routes_isValid = false;
}

void OAIDirections_directions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDirections_directions::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_waypoints_isValid = ::OpenAPI::fromJsonValue(waypoints, json[QString("waypoints")]);
    m_waypoints_isSet = !json[QString("waypoints")].isNull() && m_waypoints_isValid;

    m_routes_isValid = ::OpenAPI::fromJsonValue(routes, json[QString("routes")]);
    m_routes_isSet = !json[QString("routes")].isNull() && m_routes_isValid;
}

QString OAIDirections_directions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDirections_directions::asJsonObject() const {
    QJsonObject obj;
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(code));
    }
    if (waypoints.size() > 0) {
        obj.insert(QString("waypoints"), ::OpenAPI::toJsonValue(waypoints));
    }
    if (routes.size() > 0) {
        obj.insert(QString("routes"), ::OpenAPI::toJsonValue(routes));
    }
    return obj;
}

QString OAIDirections_directions::getCode() const {
    return code;
}
void OAIDirections_directions::setCode(const QString &code) {
    this->code = code;
    this->m_code_isSet = true;
}

QList<OAIObject> OAIDirections_directions::getWaypoints() const {
    return waypoints;
}
void OAIDirections_directions::setWaypoints(const QList<OAIObject> &waypoints) {
    this->waypoints = waypoints;
    this->m_waypoints_isSet = true;
}

QList<OAIDirections_directions_routes> OAIDirections_directions::getRoutes() const {
    return routes;
}
void OAIDirections_directions::setRoutes(const QList<OAIDirections_directions_routes> &routes) {
    this->routes = routes;
    this->m_routes_isSet = true;
}

bool OAIDirections_directions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (waypoints.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (routes.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDirections_directions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
