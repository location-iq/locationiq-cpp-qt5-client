/**
 * LocationIQ
 * LocationIQ provides flexible enterprise-grade location based solutions. We work with developers, startups and enterprises worldwide serving billions of requests everyday. This page provides an overview of the technical aspects of our API and will help you get started.
 *
 * The version of the OpenAPI document: 1.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchApi.h"
#include "OAIHelpers.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAISearchApi::OAISearchApi(const QString &scheme, const QString &host, int port, const QString &basePath, const int timeOut)
    : _scheme(scheme),
      _host(host),
      _port(port),
      _basePath(basePath),
      _timeOut(timeOut),
      isResponseCompressionEnabled(false),
      isRequestCompressionEnabled(false) {}

OAISearchApi::~OAISearchApi() {
}

void OAISearchApi::setScheme(const QString &scheme) {
    _scheme = scheme;
}

void OAISearchApi::setHost(const QString &host) {
    _host = host;
}

void OAISearchApi::setPort(int port) {
    _port = port;
}

void OAISearchApi::setBasePath(const QString &basePath) {
    _basePath = basePath;
}

void OAISearchApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAISearchApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAISearchApi::addHeaders(const QString &key, const QString &value) {
    defaultHeaders.insert(key, value);
}

void OAISearchApi::enableRequestCompression() {
    isRequestCompressionEnabled = true;
}

void OAISearchApi::enableResponseCompression() {
    isResponseCompressionEnabled = true;
}

void OAISearchApi::abortRequests(){
    emit abortRequestsSignal();
}

void OAISearchApi::search(const QString &q, const QString &format, const qint32 &normalizecity, const qint32 &addressdetails, const QString &viewbox, const qint32 &bounded, const qint32 &limit, const QString &accept_language, const QString &countrycodes, const qint32 &namedetails, const qint32 &dedupe, const qint32 &extratags, const qint32 &statecode, const qint32 &matchquality, const qint32 &postaladdress) {
    QString fullPath = QString("%1://%2%3%4%5")
                           .arg(_scheme)
                           .arg(_host)
                           .arg(_port ? ":" + QString::number(_port) : "")
                           .arg(_basePath)
                           .arg("/search.php");

    if (fullPath.indexOf("?") > 0)
        fullPath.append("&");
    else
        fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("q")).append("=").append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(q)));

    if (fullPath.indexOf("?") > 0)
        fullPath.append("&");
    else
        fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("format")).append("=").append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(format)));

    if (fullPath.indexOf("?") > 0)
        fullPath.append("&");
    else
        fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("normalizecity")).append("=").append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(normalizecity)));

    if (fullPath.indexOf("?") > 0)
        fullPath.append("&");
    else
        fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("addressdetails")).append("=").append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(addressdetails)));

    if (fullPath.indexOf("?") > 0)
        fullPath.append("&");
    else
        fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("viewbox")).append("=").append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(viewbox)));

    if (fullPath.indexOf("?") > 0)
        fullPath.append("&");
    else
        fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("bounded")).append("=").append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(bounded)));

    if (fullPath.indexOf("?") > 0)
        fullPath.append("&");
    else
        fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("limit")).append("=").append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(limit)));

    if (fullPath.indexOf("?") > 0)
        fullPath.append("&");
    else
        fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("accept-language")).append("=").append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(accept_language)));

    if (fullPath.indexOf("?") > 0)
        fullPath.append("&");
    else
        fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("countrycodes")).append("=").append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(countrycodes)));

    if (fullPath.indexOf("?") > 0)
        fullPath.append("&");
    else
        fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("namedetails")).append("=").append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(namedetails)));

    if (fullPath.indexOf("?") > 0)
        fullPath.append("&");
    else
        fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("dedupe")).append("=").append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(dedupe)));

    if (fullPath.indexOf("?") > 0)
        fullPath.append("&");
    else
        fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("extratags")).append("=").append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(extratags)));

    if (fullPath.indexOf("?") > 0)
        fullPath.append("&");
    else
        fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("statecode")).append("=").append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(statecode)));

    if (fullPath.indexOf("?") > 0)
        fullPath.append("&");
    else
        fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("matchquality")).append("=").append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(matchquality)));

    if (fullPath.indexOf("?") > 0)
        fullPath.append("&");
    else
        fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("postaladdress")).append("=").append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(postaladdress)));

    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");

    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISearchApi::searchCallback);
    connect(this, &OAISearchApi::abortRequestsSignal, worker, &QObject::deleteLater); 
    worker->execute(&input);
}

void OAISearchApi::searchCallback(OAIHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    QList<OAILocation> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    foreach (QJsonValue obj, jsonArray) {
        OAILocation val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit searchSignal(output);
        emit searchSignalFull(worker, output);
    } else {
        emit searchSignalE(output, error_type, error_str);
        emit searchSignalEFull(worker, error_type, error_str);
    }
}

} // namespace OpenAPI
