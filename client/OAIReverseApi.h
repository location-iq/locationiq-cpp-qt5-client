/**
 * LocationIQ
 * LocationIQ provides flexible enterprise-grade location based solutions. We work with developers, startups and enterprises worldwide serving billions of requests everyday. This page provides an overview of the technical aspects of our API and will help you get started.
 *
 * The version of the OpenAPI document: 1.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIReverseApi_H
#define OAI_OAIReverseApi_H

#include "OAIHttpRequest.h"

#include "OAIError.h"
#include "OAILocation.h"
#include <QString>

#include <QObject>

namespace OpenAPI {

class OAIReverseApi : public QObject {
    Q_OBJECT

public:
    OAIReverseApi(const QString &scheme = "https", const QString &host = "eu1.locationiq.com", int port = 0, const QString &basePath = "/v1", const int timeOut = 0);
    ~OAIReverseApi();

    void setScheme(const QString &scheme);
    void setHost(const QString &host);
    void setPort(int port);
    void setBasePath(const QString &basePath);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();

    void reverse(const double &lat, const double &lon, const QString &format, const qint32 &normalizecity, const qint32 &addressdetails, const QString &accept_language, const qint32 &namedetails, const qint32 &extratags, const qint32 &statecode, const qint32 &showdistance, const qint32 &postaladdress);

private:
    QString _scheme, _host;
    int _port;
    QString _basePath;
    int _timeOut;
    QString _workingDirectory;
    QMap<QString, QString> defaultHeaders;
    bool isResponseCompressionEnabled;
    bool isRequestCompressionEnabled;

    void reverseCallback(OAIHttpRequestWorker *worker);

signals:

    void reverseSignal(OAILocation summary);

    void reverseSignalFull(OAIHttpRequestWorker *worker, OAILocation summary);

    void reverseSignalE(OAILocation summary, QNetworkReply::NetworkError error_type, QString error_str);

    void reverseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);

    void abortRequestsSignal(); 
};

} // namespace OpenAPI
#endif
