/**
 * LocationIQ
 * LocationIQ provides flexible enterprise-grade location based solutions. We work with developers, startups and enterprises worldwide serving billions of requests everyday. This page provides an overview of the technical aspects of our API and will help you get started.
 *
 * The version of the OpenAPI document: 1.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMatrixApi.h"
#include "OAIHelpers.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIMatrixApi::OAIMatrixApi(const QString &scheme, const QString &host, int port, const QString &basePath, const int timeOut)
    : _scheme(scheme),
      _host(host),
      _port(port),
      _basePath(basePath),
      _timeOut(timeOut),
      isResponseCompressionEnabled(false),
      isRequestCompressionEnabled(false) {}

OAIMatrixApi::~OAIMatrixApi() {
}

void OAIMatrixApi::setScheme(const QString &scheme) {
    _scheme = scheme;
}

void OAIMatrixApi::setHost(const QString &host) {
    _host = host;
}

void OAIMatrixApi::setPort(int port) {
    _port = port;
}

void OAIMatrixApi::setBasePath(const QString &basePath) {
    _basePath = basePath;
}

void OAIMatrixApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIMatrixApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIMatrixApi::addHeaders(const QString &key, const QString &value) {
    defaultHeaders.insert(key, value);
}

void OAIMatrixApi::enableRequestCompression() {
    isRequestCompressionEnabled = true;
}

void OAIMatrixApi::enableResponseCompression() {
    isResponseCompressionEnabled = true;
}

void OAIMatrixApi::abortRequests(){
    emit abortRequestsSignal();
}

void OAIMatrixApi::matrix(const QString &coordinates, const QString &bearings, const QString &radiuses, const QString &generate_hints, const QString &approaches, const QString &exclude, const QString &annotations, const qint32 &sources, const qint32 &destinations, const double &fallback_speed, const QString &fallback_coordinate) {
    QString fullPath = QString("%1://%2%3%4%5")
                           .arg(_scheme)
                           .arg(_host)
                           .arg(_port ? ":" + QString::number(_port) : "")
                           .arg(_basePath)
                           .arg("/matrix/driving/{coordinates}");
    QString coordinatesPathParam("{");
    coordinatesPathParam.append("coordinates").append("}");
    fullPath.replace(coordinatesPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(coordinates)));

    if (fullPath.indexOf("?") > 0)
        fullPath.append("&");
    else
        fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("bearings")).append("=").append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(bearings)));

    if (fullPath.indexOf("?") > 0)
        fullPath.append("&");
    else
        fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("radiuses")).append("=").append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(radiuses)));

    if (fullPath.indexOf("?") > 0)
        fullPath.append("&");
    else
        fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("generate_hints")).append("=").append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(generate_hints)));

    if (fullPath.indexOf("?") > 0)
        fullPath.append("&");
    else
        fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("approaches")).append("=").append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(approaches)));

    if (fullPath.indexOf("?") > 0)
        fullPath.append("&");
    else
        fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("exclude")).append("=").append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(exclude)));

    if (fullPath.indexOf("?") > 0)
        fullPath.append("&");
    else
        fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("annotations")).append("=").append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(annotations)));

    if (fullPath.indexOf("?") > 0)
        fullPath.append("&");
    else
        fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("sources")).append("=").append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(sources)));

    if (fullPath.indexOf("?") > 0)
        fullPath.append("&");
    else
        fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("destinations")).append("=").append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(destinations)));

    if (fullPath.indexOf("?") > 0)
        fullPath.append("&");
    else
        fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("fallback_speed")).append("=").append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(fallback_speed)));

    if (fullPath.indexOf("?") > 0)
        fullPath.append("&");
    else
        fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("fallback_coordinate")).append("=").append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(fallback_coordinate)));

    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");

    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMatrixApi::matrixCallback);
    connect(this, &OAIMatrixApi::abortRequestsSignal, worker, &QObject::deleteLater); 
    worker->execute(&input);
}

void OAIMatrixApi::matrixCallback(OAIHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    OAIDirections_matrix output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit matrixSignal(output);
        emit matrixSignalFull(worker, output);
    } else {
        emit matrixSignalE(output, error_type, error_str);
        emit matrixSignalEFull(worker, error_type, error_str);
    }
}

} // namespace OpenAPI
