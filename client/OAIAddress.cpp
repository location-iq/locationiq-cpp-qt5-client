/**
 * LocationIQ
 * LocationIQ provides flexible enterprise-grade location based solutions. We work with developers, startups and enterprises worldwide serving billions of requests everyday. This page provides an overview of the technical aspects of our API and will help you get started.
 *
 * The version of the OpenAPI document: 1.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAddress.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAddress::OAIAddress(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAddress::OAIAddress() {
    this->initializeModel();
}

OAIAddress::~OAIAddress() {}

void OAIAddress::initializeModel() {

    m_house_number_isSet = false;
    m_house_number_isValid = false;

    m_road_isSet = false;
    m_road_isValid = false;

    m_residential_isSet = false;
    m_residential_isValid = false;

    m_borough_isSet = false;
    m_borough_isValid = false;

    m_neighbourhood_isSet = false;
    m_neighbourhood_isValid = false;

    m_quarter_isSet = false;
    m_quarter_isValid = false;

    m_hamlet_isSet = false;
    m_hamlet_isValid = false;

    m_suburb_isSet = false;
    m_suburb_isValid = false;

    m_island_isSet = false;
    m_island_isValid = false;

    m_village_isSet = false;
    m_village_isValid = false;

    m_town_isSet = false;
    m_town_isValid = false;

    m_city_isSet = false;
    m_city_isValid = false;

    m_city_district_isSet = false;
    m_city_district_isValid = false;

    m_county_isSet = false;
    m_county_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_state_district_isSet = false;
    m_state_district_isValid = false;

    m_postcode_isSet = false;
    m_postcode_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_country_code_isSet = false;
    m_country_code_isValid = false;

    m_state_code_isSet = false;
    m_state_code_isValid = false;
}

void OAIAddress::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAddress::fromJsonObject(QJsonObject json) {

    m_house_number_isValid = ::OpenAPI::fromJsonValue(house_number, json[QString("house_number")]);
    m_house_number_isSet = !json[QString("house_number")].isNull() && m_house_number_isValid;

    m_road_isValid = ::OpenAPI::fromJsonValue(road, json[QString("road")]);
    m_road_isSet = !json[QString("road")].isNull() && m_road_isValid;

    m_residential_isValid = ::OpenAPI::fromJsonValue(residential, json[QString("residential")]);
    m_residential_isSet = !json[QString("residential")].isNull() && m_residential_isValid;

    m_borough_isValid = ::OpenAPI::fromJsonValue(borough, json[QString("borough")]);
    m_borough_isSet = !json[QString("borough")].isNull() && m_borough_isValid;

    m_neighbourhood_isValid = ::OpenAPI::fromJsonValue(neighbourhood, json[QString("neighbourhood")]);
    m_neighbourhood_isSet = !json[QString("neighbourhood")].isNull() && m_neighbourhood_isValid;

    m_quarter_isValid = ::OpenAPI::fromJsonValue(quarter, json[QString("quarter")]);
    m_quarter_isSet = !json[QString("quarter")].isNull() && m_quarter_isValid;

    m_hamlet_isValid = ::OpenAPI::fromJsonValue(hamlet, json[QString("hamlet")]);
    m_hamlet_isSet = !json[QString("hamlet")].isNull() && m_hamlet_isValid;

    m_suburb_isValid = ::OpenAPI::fromJsonValue(suburb, json[QString("suburb")]);
    m_suburb_isSet = !json[QString("suburb")].isNull() && m_suburb_isValid;

    m_island_isValid = ::OpenAPI::fromJsonValue(island, json[QString("island")]);
    m_island_isSet = !json[QString("island")].isNull() && m_island_isValid;

    m_village_isValid = ::OpenAPI::fromJsonValue(village, json[QString("village")]);
    m_village_isSet = !json[QString("village")].isNull() && m_village_isValid;

    m_town_isValid = ::OpenAPI::fromJsonValue(town, json[QString("town")]);
    m_town_isSet = !json[QString("town")].isNull() && m_town_isValid;

    m_city_isValid = ::OpenAPI::fromJsonValue(city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_city_district_isValid = ::OpenAPI::fromJsonValue(city_district, json[QString("city_district")]);
    m_city_district_isSet = !json[QString("city_district")].isNull() && m_city_district_isValid;

    m_county_isValid = ::OpenAPI::fromJsonValue(county, json[QString("county")]);
    m_county_isSet = !json[QString("county")].isNull() && m_county_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_state_district_isValid = ::OpenAPI::fromJsonValue(state_district, json[QString("state_district")]);
    m_state_district_isSet = !json[QString("state_district")].isNull() && m_state_district_isValid;

    m_postcode_isValid = ::OpenAPI::fromJsonValue(postcode, json[QString("postcode")]);
    m_postcode_isSet = !json[QString("postcode")].isNull() && m_postcode_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_country_code_isValid = ::OpenAPI::fromJsonValue(country_code, json[QString("country_code")]);
    m_country_code_isSet = !json[QString("country_code")].isNull() && m_country_code_isValid;

    m_state_code_isValid = ::OpenAPI::fromJsonValue(state_code, json[QString("state_code")]);
    m_state_code_isSet = !json[QString("state_code")].isNull() && m_state_code_isValid;
}

QString OAIAddress::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAddress::asJsonObject() const {
    QJsonObject obj;
    if (m_house_number_isSet) {
        obj.insert(QString("house_number"), ::OpenAPI::toJsonValue(house_number));
    }
    if (m_road_isSet) {
        obj.insert(QString("road"), ::OpenAPI::toJsonValue(road));
    }
    if (m_residential_isSet) {
        obj.insert(QString("residential"), ::OpenAPI::toJsonValue(residential));
    }
    if (m_borough_isSet) {
        obj.insert(QString("borough"), ::OpenAPI::toJsonValue(borough));
    }
    if (m_neighbourhood_isSet) {
        obj.insert(QString("neighbourhood"), ::OpenAPI::toJsonValue(neighbourhood));
    }
    if (m_quarter_isSet) {
        obj.insert(QString("quarter"), ::OpenAPI::toJsonValue(quarter));
    }
    if (m_hamlet_isSet) {
        obj.insert(QString("hamlet"), ::OpenAPI::toJsonValue(hamlet));
    }
    if (m_suburb_isSet) {
        obj.insert(QString("suburb"), ::OpenAPI::toJsonValue(suburb));
    }
    if (m_island_isSet) {
        obj.insert(QString("island"), ::OpenAPI::toJsonValue(island));
    }
    if (m_village_isSet) {
        obj.insert(QString("village"), ::OpenAPI::toJsonValue(village));
    }
    if (m_town_isSet) {
        obj.insert(QString("town"), ::OpenAPI::toJsonValue(town));
    }
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(city));
    }
    if (m_city_district_isSet) {
        obj.insert(QString("city_district"), ::OpenAPI::toJsonValue(city_district));
    }
    if (m_county_isSet) {
        obj.insert(QString("county"), ::OpenAPI::toJsonValue(county));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(state));
    }
    if (m_state_district_isSet) {
        obj.insert(QString("state_district"), ::OpenAPI::toJsonValue(state_district));
    }
    if (m_postcode_isSet) {
        obj.insert(QString("postcode"), ::OpenAPI::toJsonValue(postcode));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(country));
    }
    if (m_country_code_isSet) {
        obj.insert(QString("country_code"), ::OpenAPI::toJsonValue(country_code));
    }
    if (m_state_code_isSet) {
        obj.insert(QString("state_code"), ::OpenAPI::toJsonValue(state_code));
    }
    return obj;
}

QString OAIAddress::getHouseNumber() const {
    return house_number;
}
void OAIAddress::setHouseNumber(const QString &house_number) {
    this->house_number = house_number;
    this->m_house_number_isSet = true;
}

QString OAIAddress::getRoad() const {
    return road;
}
void OAIAddress::setRoad(const QString &road) {
    this->road = road;
    this->m_road_isSet = true;
}

QString OAIAddress::getResidential() const {
    return residential;
}
void OAIAddress::setResidential(const QString &residential) {
    this->residential = residential;
    this->m_residential_isSet = true;
}

QString OAIAddress::getBorough() const {
    return borough;
}
void OAIAddress::setBorough(const QString &borough) {
    this->borough = borough;
    this->m_borough_isSet = true;
}

QString OAIAddress::getNeighbourhood() const {
    return neighbourhood;
}
void OAIAddress::setNeighbourhood(const QString &neighbourhood) {
    this->neighbourhood = neighbourhood;
    this->m_neighbourhood_isSet = true;
}

QString OAIAddress::getQuarter() const {
    return quarter;
}
void OAIAddress::setQuarter(const QString &quarter) {
    this->quarter = quarter;
    this->m_quarter_isSet = true;
}

QString OAIAddress::getHamlet() const {
    return hamlet;
}
void OAIAddress::setHamlet(const QString &hamlet) {
    this->hamlet = hamlet;
    this->m_hamlet_isSet = true;
}

QString OAIAddress::getSuburb() const {
    return suburb;
}
void OAIAddress::setSuburb(const QString &suburb) {
    this->suburb = suburb;
    this->m_suburb_isSet = true;
}

QString OAIAddress::getIsland() const {
    return island;
}
void OAIAddress::setIsland(const QString &island) {
    this->island = island;
    this->m_island_isSet = true;
}

QString OAIAddress::getVillage() const {
    return village;
}
void OAIAddress::setVillage(const QString &village) {
    this->village = village;
    this->m_village_isSet = true;
}

QString OAIAddress::getTown() const {
    return town;
}
void OAIAddress::setTown(const QString &town) {
    this->town = town;
    this->m_town_isSet = true;
}

QString OAIAddress::getCity() const {
    return city;
}
void OAIAddress::setCity(const QString &city) {
    this->city = city;
    this->m_city_isSet = true;
}

QString OAIAddress::getCityDistrict() const {
    return city_district;
}
void OAIAddress::setCityDistrict(const QString &city_district) {
    this->city_district = city_district;
    this->m_city_district_isSet = true;
}

QString OAIAddress::getCounty() const {
    return county;
}
void OAIAddress::setCounty(const QString &county) {
    this->county = county;
    this->m_county_isSet = true;
}

QString OAIAddress::getState() const {
    return state;
}
void OAIAddress::setState(const QString &state) {
    this->state = state;
    this->m_state_isSet = true;
}

QString OAIAddress::getStateDistrict() const {
    return state_district;
}
void OAIAddress::setStateDistrict(const QString &state_district) {
    this->state_district = state_district;
    this->m_state_district_isSet = true;
}

QString OAIAddress::getPostcode() const {
    return postcode;
}
void OAIAddress::setPostcode(const QString &postcode) {
    this->postcode = postcode;
    this->m_postcode_isSet = true;
}

QString OAIAddress::getCountry() const {
    return country;
}
void OAIAddress::setCountry(const QString &country) {
    this->country = country;
    this->m_country_isSet = true;
}

QString OAIAddress::getCountryCode() const {
    return country_code;
}
void OAIAddress::setCountryCode(const QString &country_code) {
    this->country_code = country_code;
    this->m_country_code_isSet = true;
}

QString OAIAddress::getStateCode() const {
    return state_code;
}
void OAIAddress::setStateCode(const QString &state_code) {
    this->state_code = state_code;
    this->m_state_code_isSet = true;
}

bool OAIAddress::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_house_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_road_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_residential_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_borough_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_neighbourhood_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quarter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hamlet_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suburb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_island_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_village_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_town_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_district_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_county_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_district_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_postcode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAddress::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
