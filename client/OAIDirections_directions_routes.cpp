/**
 * LocationIQ
 * LocationIQ provides flexible enterprise-grade location based solutions. We work with developers, startups and enterprises worldwide serving billions of requests everyday. This page provides an overview of the technical aspects of our API and will help you get started.
 *
 * The version of the OpenAPI document: 1.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDirections_directions_routes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDirections_directions_routes::OAIDirections_directions_routes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDirections_directions_routes::OAIDirections_directions_routes() {
    this->initializeModel();
}

OAIDirections_directions_routes::~OAIDirections_directions_routes() {}

void OAIDirections_directions_routes::initializeModel() {

    m_legs_isSet = false;
    m_legs_isValid = false;

    m_weight_name_isSet = false;
    m_weight_name_isValid = false;

    m_geometry_isSet = false;
    m_geometry_isValid = false;

    m_weight_isSet = false;
    m_weight_isValid = false;

    m_distance_isSet = false;
    m_distance_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;
}

void OAIDirections_directions_routes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDirections_directions_routes::fromJsonObject(QJsonObject json) {

    m_legs_isValid = ::OpenAPI::fromJsonValue(legs, json[QString("legs")]);
    m_legs_isSet = !json[QString("legs")].isNull() && m_legs_isValid;

    m_weight_name_isValid = ::OpenAPI::fromJsonValue(weight_name, json[QString("weight_name")]);
    m_weight_name_isSet = !json[QString("weight_name")].isNull() && m_weight_name_isValid;

    m_geometry_isValid = ::OpenAPI::fromJsonValue(geometry, json[QString("geometry")]);
    m_geometry_isSet = !json[QString("geometry")].isNull() && m_geometry_isValid;

    m_weight_isValid = ::OpenAPI::fromJsonValue(weight, json[QString("weight")]);
    m_weight_isSet = !json[QString("weight")].isNull() && m_weight_isValid;

    m_distance_isValid = ::OpenAPI::fromJsonValue(distance, json[QString("distance")]);
    m_distance_isSet = !json[QString("distance")].isNull() && m_distance_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;
}

QString OAIDirections_directions_routes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDirections_directions_routes::asJsonObject() const {
    QJsonObject obj;
    if (legs.size() > 0) {
        obj.insert(QString("legs"), ::OpenAPI::toJsonValue(legs));
    }
    if (m_weight_name_isSet) {
        obj.insert(QString("weight_name"), ::OpenAPI::toJsonValue(weight_name));
    }
    if (m_geometry_isSet) {
        obj.insert(QString("geometry"), ::OpenAPI::toJsonValue(geometry));
    }
    if (m_weight_isSet) {
        obj.insert(QString("weight"), ::OpenAPI::toJsonValue(weight));
    }
    if (m_distance_isSet) {
        obj.insert(QString("distance"), ::OpenAPI::toJsonValue(distance));
    }
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(duration));
    }
    return obj;
}

QList<OAIObject> OAIDirections_directions_routes::getLegs() const {
    return legs;
}
void OAIDirections_directions_routes::setLegs(const QList<OAIObject> &legs) {
    this->legs = legs;
    this->m_legs_isSet = true;
}

QString OAIDirections_directions_routes::getWeightName() const {
    return weight_name;
}
void OAIDirections_directions_routes::setWeightName(const QString &weight_name) {
    this->weight_name = weight_name;
    this->m_weight_name_isSet = true;
}

QString OAIDirections_directions_routes::getGeometry() const {
    return geometry;
}
void OAIDirections_directions_routes::setGeometry(const QString &geometry) {
    this->geometry = geometry;
    this->m_geometry_isSet = true;
}

double OAIDirections_directions_routes::getWeight() const {
    return weight;
}
void OAIDirections_directions_routes::setWeight(const double &weight) {
    this->weight = weight;
    this->m_weight_isSet = true;
}

double OAIDirections_directions_routes::getDistance() const {
    return distance;
}
void OAIDirections_directions_routes::setDistance(const double &distance) {
    this->distance = distance;
    this->m_distance_isSet = true;
}

double OAIDirections_directions_routes::getDuration() const {
    return duration;
}
void OAIDirections_directions_routes::setDuration(const double &duration) {
    this->duration = duration;
    this->m_duration_isSet = true;
}

bool OAIDirections_directions_routes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (legs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_geometry_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_distance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDirections_directions_routes::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
