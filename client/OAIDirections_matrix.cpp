/**
 * LocationIQ
 * LocationIQ provides flexible enterprise-grade location based solutions. We work with developers, startups and enterprises worldwide serving billions of requests everyday. This page provides an overview of the technical aspects of our API and will help you get started.
 *
 * The version of the OpenAPI document: 1.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDirections_matrix.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDirections_matrix::OAIDirections_matrix(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDirections_matrix::OAIDirections_matrix() {
    this->initializeModel();
}

OAIDirections_matrix::~OAIDirections_matrix() {}

void OAIDirections_matrix::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_distances_isSet = false;
    m_distances_isValid = false;

    m_fallback_speed_cells_isSet = false;
    m_fallback_speed_cells_isValid = false;

    m_sources_isSet = false;
    m_sources_isValid = false;

    m_destinations_isSet = false;
    m_destinations_isValid = false;
}

void OAIDirections_matrix::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDirections_matrix::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_distances_isValid = ::OpenAPI::fromJsonValue(distances, json[QString("distances")]);
    m_distances_isSet = !json[QString("distances")].isNull() && m_distances_isValid;

    m_fallback_speed_cells_isValid = ::OpenAPI::fromJsonValue(fallback_speed_cells, json[QString("fallback_speed_cells")]);
    m_fallback_speed_cells_isSet = !json[QString("fallback_speed_cells")].isNull() && m_fallback_speed_cells_isValid;

    m_sources_isValid = ::OpenAPI::fromJsonValue(sources, json[QString("sources")]);
    m_sources_isSet = !json[QString("sources")].isNull() && m_sources_isValid;

    m_destinations_isValid = ::OpenAPI::fromJsonValue(destinations, json[QString("destinations")]);
    m_destinations_isSet = !json[QString("destinations")].isNull() && m_destinations_isValid;
}

QString OAIDirections_matrix::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDirections_matrix::asJsonObject() const {
    QJsonObject obj;
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(code));
    }
    if (distances.size() > 0) {
        obj.insert(QString("distances"), ::OpenAPI::toJsonValue(distances));
    }
    if (fallback_speed_cells.size() > 0) {
        obj.insert(QString("fallback_speed_cells"), ::OpenAPI::toJsonValue(fallback_speed_cells));
    }
    if (sources.size() > 0) {
        obj.insert(QString("sources"), ::OpenAPI::toJsonValue(sources));
    }
    if (destinations.size() > 0) {
        obj.insert(QString("destinations"), ::OpenAPI::toJsonValue(destinations));
    }
    return obj;
}

QString OAIDirections_matrix::getCode() const {
    return code;
}
void OAIDirections_matrix::setCode(const QString &code) {
    this->code = code;
    this->m_code_isSet = true;
}

QList<double> OAIDirections_matrix::getDistances() const {
    return distances;
}
void OAIDirections_matrix::setDistances(const QList<double> &distances) {
    this->distances = distances;
    this->m_distances_isSet = true;
}

QList<double> OAIDirections_matrix::getFallbackSpeedCells() const {
    return fallback_speed_cells;
}
void OAIDirections_matrix::setFallbackSpeedCells(const QList<double> &fallback_speed_cells) {
    this->fallback_speed_cells = fallback_speed_cells;
    this->m_fallback_speed_cells_isSet = true;
}

QList<OAIDirections_matrix_sources> OAIDirections_matrix::getSources() const {
    return sources;
}
void OAIDirections_matrix::setSources(const QList<OAIDirections_matrix_sources> &sources) {
    this->sources = sources;
    this->m_sources_isSet = true;
}

QList<OAIDirections_matrix_sources> OAIDirections_matrix::getDestinations() const {
    return destinations;
}
void OAIDirections_matrix::setDestinations(const QList<OAIDirections_matrix_sources> &destinations) {
    this->destinations = destinations;
    this->m_destinations_isSet = true;
}

bool OAIDirections_matrix::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (distances.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (fallback_speed_cells.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (sources.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (destinations.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDirections_matrix::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
