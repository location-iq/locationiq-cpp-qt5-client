/**
 * LocationIQ
 * LocationIQ provides flexible enterprise-grade location based solutions. We work with developers, startups and enterprises worldwide serving billions of requests everyday. This page provides an overview of the technical aspects of our API and will help you get started.
 *
 * The version of the OpenAPI document: 1.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDirections_nearest_waypoints.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDirections_nearest_waypoints::OAIDirections_nearest_waypoints(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDirections_nearest_waypoints::OAIDirections_nearest_waypoints() {
    this->initializeModel();
}

OAIDirections_nearest_waypoints::~OAIDirections_nearest_waypoints() {}

void OAIDirections_nearest_waypoints::initializeModel() {

    m_nodes_isSet = false;
    m_nodes_isValid = false;

    m_distance_isSet = false;
    m_distance_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIDirections_nearest_waypoints::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDirections_nearest_waypoints::fromJsonObject(QJsonObject json) {

    m_nodes_isValid = ::OpenAPI::fromJsonValue(nodes, json[QString("nodes")]);
    m_nodes_isSet = !json[QString("nodes")].isNull() && m_nodes_isValid;

    m_distance_isValid = ::OpenAPI::fromJsonValue(distance, json[QString("distance")]);
    m_distance_isSet = !json[QString("distance")].isNull() && m_distance_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIDirections_nearest_waypoints::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDirections_nearest_waypoints::asJsonObject() const {
    QJsonObject obj;
    if (nodes.size() > 0) {
        obj.insert(QString("nodes"), ::OpenAPI::toJsonValue(nodes));
    }
    if (m_distance_isSet) {
        obj.insert(QString("distance"), ::OpenAPI::toJsonValue(distance));
    }
    if (location.size() > 0) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(location));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(name));
    }
    return obj;
}

QList<double> OAIDirections_nearest_waypoints::getNodes() const {
    return nodes;
}
void OAIDirections_nearest_waypoints::setNodes(const QList<double> &nodes) {
    this->nodes = nodes;
    this->m_nodes_isSet = true;
}

double OAIDirections_nearest_waypoints::getDistance() const {
    return distance;
}
void OAIDirections_nearest_waypoints::setDistance(const double &distance) {
    this->distance = distance;
    this->m_distance_isSet = true;
}

QList<double> OAIDirections_nearest_waypoints::getLocation() const {
    return location;
}
void OAIDirections_nearest_waypoints::setLocation(const QList<double> &location) {
    this->location = location;
    this->m_location_isSet = true;
}

QString OAIDirections_nearest_waypoints::getName() const {
    return name;
}
void OAIDirections_nearest_waypoints::setName(const QString &name) {
    this->name = name;
    this->m_name_isSet = true;
}

bool OAIDirections_nearest_waypoints::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (nodes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_distance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (location.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDirections_nearest_waypoints::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
