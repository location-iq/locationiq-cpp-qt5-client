/**
 * LocationIQ
 * LocationIQ provides flexible enterprise-grade location based solutions. We work with developers, startups and enterprises worldwide serving billions of requests everyday. This page provides an overview of the technical aspects of our API and will help you get started.
 *
 * The version of the OpenAPI document: 1.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDirections_nearest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDirections_nearest::OAIDirections_nearest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDirections_nearest::OAIDirections_nearest() {
    this->initializeModel();
}

OAIDirections_nearest::~OAIDirections_nearest() {}

void OAIDirections_nearest::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_waypoints_isSet = false;
    m_waypoints_isValid = false;
}

void OAIDirections_nearest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDirections_nearest::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_waypoints_isValid = ::OpenAPI::fromJsonValue(waypoints, json[QString("waypoints")]);
    m_waypoints_isSet = !json[QString("waypoints")].isNull() && m_waypoints_isValid;
}

QString OAIDirections_nearest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDirections_nearest::asJsonObject() const {
    QJsonObject obj;
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(code));
    }
    if (waypoints.size() > 0) {
        obj.insert(QString("waypoints"), ::OpenAPI::toJsonValue(waypoints));
    }
    return obj;
}

QString OAIDirections_nearest::getCode() const {
    return code;
}
void OAIDirections_nearest::setCode(const QString &code) {
    this->code = code;
    this->m_code_isSet = true;
}

QList<OAIDirections_nearest_waypoints> OAIDirections_nearest::getWaypoints() const {
    return waypoints;
}
void OAIDirections_nearest::setWaypoints(const QList<OAIDirections_nearest_waypoints> &waypoints) {
    this->waypoints = waypoints;
    this->m_waypoints_isSet = true;
}

bool OAIDirections_nearest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (waypoints.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDirections_nearest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
