/**
 * LocationIQ
 * LocationIQ provides flexible enterprise-grade location based solutions. We work with developers, startups and enterprises worldwide serving billions of requests everyday. This page provides an overview of the technical aspects of our API and will help you get started.
 *
 * The version of the OpenAPI document: 1.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDirections_matching.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDirections_matching::OAIDirections_matching(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDirections_matching::OAIDirections_matching() {
    this->initializeModel();
}

OAIDirections_matching::~OAIDirections_matching() {}

void OAIDirections_matching::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_tracepoints_isSet = false;
    m_tracepoints_isValid = false;

    m_matchings_isSet = false;
    m_matchings_isValid = false;
}

void OAIDirections_matching::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDirections_matching::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_tracepoints_isValid = ::OpenAPI::fromJsonValue(tracepoints, json[QString("tracepoints")]);
    m_tracepoints_isSet = !json[QString("tracepoints")].isNull() && m_tracepoints_isValid;

    m_matchings_isValid = ::OpenAPI::fromJsonValue(matchings, json[QString("matchings")]);
    m_matchings_isSet = !json[QString("matchings")].isNull() && m_matchings_isValid;
}

QString OAIDirections_matching::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDirections_matching::asJsonObject() const {
    QJsonObject obj;
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(code));
    }
    if (tracepoints.size() > 0) {
        obj.insert(QString("tracepoints"), ::OpenAPI::toJsonValue(tracepoints));
    }
    if (matchings.size() > 0) {
        obj.insert(QString("matchings"), ::OpenAPI::toJsonValue(matchings));
    }
    return obj;
}

QString OAIDirections_matching::getCode() const {
    return code;
}
void OAIDirections_matching::setCode(const QString &code) {
    this->code = code;
    this->m_code_isSet = true;
}

QList<OAIObject> OAIDirections_matching::getTracepoints() const {
    return tracepoints;
}
void OAIDirections_matching::setTracepoints(const QList<OAIObject> &tracepoints) {
    this->tracepoints = tracepoints;
    this->m_tracepoints_isSet = true;
}

QList<OAIObject> OAIDirections_matching::getMatchings() const {
    return matchings;
}
void OAIDirections_matching::setMatchings(const QList<OAIObject> &matchings) {
    this->matchings = matchings;
    this->m_matchings_isSet = true;
}

bool OAIDirections_matching::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (tracepoints.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (matchings.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDirections_matching::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
